/// <reference types="node" />
import { inspect } from "util";
import snarkjs from "./snarkjs";
interface HasToString {
    toString: () => string;
}
interface MemFastFile {
    type: "mem";
    data?: Uint8Array;
}
export interface ZkeyFastFile {
    type: "mem";
    name: string;
    data: Uint8Array;
}
declare module "hardhat/types/runtime" {
    interface HardhatRuntimeEnvironment {
        circom: {
            [key: string]: Function;
        };
        snarkjs: typeof snarkjs;
        circuitTest: {
            setup: (circuitName: string, options?: {
                debug: boolean;
            }) => Promise<CircuitTestUtils>;
            teardown: () => Promise<void>;
        };
    }
}
declare module "hardhat/types/config" {
    interface HardhatUserConfig {
        circom?: CircomUserConfig;
    }
    interface HardhatConfig {
        circom: CircomConfig;
    }
}
export interface CircomCircuitUserConfig {
    name?: string;
    version?: 1 | 2;
    protocol?: "groth16" | "plonk";
    circuit?: string;
    input?: string;
    wasm?: string;
    r1cs?: string;
    zkey?: string;
    vkey?: string;
    beacon?: string;
}
export interface CircomCircuitConfig {
    name: string;
    version: 1 | 2;
    protocol: "groth16" | "plonk";
    circuit: string;
    input: string;
    wasm: string;
    r1cs: string;
    zkey: string;
    vkey: string;
    beacon: string;
}
export interface CircomUserConfig {
    inputBasePath?: string;
    outputBasePath?: string;
    ptau: string;
    circuits: CircomCircuitUserConfig[];
}
export interface CircomConfig {
    inputBasePath: string;
    outputBasePath: string;
    ptau: string;
    ptauDownload: string | undefined;
    circuits: CircomCircuitConfig[];
}
export declare const PLUGIN_NAME = "hardhat-circom";
export declare const TASK_CIRCOM = "circom";
export declare const TASK_CIRCOM_TEMPLATE = "circom:template";
export declare class CircuitTestUtils {
    private r1cs;
    private wasm;
    private sym;
    private symbols?;
    private F?;
    private constraints?;
    constructor({ r1cs, wasm, sym, }: {
        r1cs: Required<MemFastFile>;
        wasm: Required<MemFastFile>;
        sym: Required<MemFastFile>;
    });
    calculateWitness(input: unknown, sanityCheck: boolean): Promise<BigInt[]>;
    calculateLabeledWitness(input: unknown, sanityCheck: boolean): Promise<LabeledWitness>;
    loadSymbols(): Promise<NonNullable<CircuitTestUtils["symbols"]>>;
    loadConstraints(): Promise<NonNullable<CircuitTestUtils["constraints"]>>;
    assertOut(actualOut: HasToString[], expectedOut: HasToString): Promise<void>;
    getDecoratedOutput(witness: HasToString[]): Promise<string>;
    checkConstraints(witness: BigInt[]): Promise<void>;
}
export declare class LabeledWitness implements ArrayLike<BigInt> {
    length: number;
    [label: string]: string | undefined | any;
    private _labels;
    constructor(witness: BigInt[], labels: {
        [label: string]: string | undefined;
    });
    [Symbol.toStringTag]: string;
    [inspect.custom](): {
        [label: string]: string | undefined;
    };
}
export {};
