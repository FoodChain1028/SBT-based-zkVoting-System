/// <reference types="debug" />
declare const wrappedSnark: {
    groth16: {
        fullProve: (input: unknown, wasmFile: unknown, zkeyFileName: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<{
            proof: unknown;
            publicSignals: unknown;
        }>;
        prove: (zkeyFileName: unknown, witnessFileName: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<{
            proof: unknown;
            publicSignals: unknown;
        }>;
        verify: (vk_verifier: unknown, publicSignals: unknown, proof: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<boolean>;
        exportSolidityCallData: (proof: unknown, publicInputs: unknown) => Promise<string>;
    };
    plonk: {
        fullProve: (input: unknown, wasmFile: unknown, zkeyFileName: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<{
            proof: unknown;
            publicSignals: unknown;
        }>;
        prove: (zkeyFileName: unknown, witnessFileName: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<{
            proof: unknown;
            publicSignals: unknown;
        }>;
        setup: (r1csName: unknown, ptauName: unknown, zkeyName: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<void>;
        verify: (vk_verifier: unknown, publicSignals: unknown, proof: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<boolean>;
        exportSolidityCallData: (proof: unknown, publicInputs: unknown) => Promise<string>;
    };
    powersOfTau: {
        newAccumulator: (curve: unknown, power: unknown, fileName: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        exportChallenge: (pTauFilename: unknown, challengeFilename: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        importResponse: (oldPtauFilename: unknown, contributionFilename: unknown, newPTauFilename: unknown, name: unknown, importPoints: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        verify: (tauFilename: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        challengeContribute: (curve: unknown, challengeFilename: unknown, responesFileName: unknown, entropy: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        beacon: (oldPtauFilename: unknown, newPTauFilename: unknown, name: unknown, beaconHashStr: unknown, numIterationsExp: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        contribute: (oldPtauFilename: unknown, newPTauFilename: unknown, name: unknown, entropy: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        preparePhase2: (oldPtauFilename: unknown, newPTauFilename: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        truncate: (ptauFilename: unknown, template: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        convert: (oldPtauFilename: unknown, newPTauFilename: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        exportJson: any;
    };
    r1cs: {
        print: (r1cs: unknown, syms: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => unknown;
        info: (r1csName: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        exportJson: (r1csFileName: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
    };
    wtns: {
        calculate: any;
        debug: (input: unknown, wasmFileName: unknown, wtnsFileName: unknown, symName: unknown, options: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        exportJson: any;
    };
    zKey: {
        newZKey: (r1csName: unknown, ptauName: unknown, zkeyName: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        exportBellman: (zkeyName: unknown, mpcparamsName: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        importBellman: (zkeyNameOld: unknown, mpcparamsName: unknown, zkeyNameNew: unknown, name: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        verifyFromR1cs: (r1csFileName: unknown, pTauFileName: unknown, zkeyFileName: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        verifyFromInit: (initFileName: unknown, pTauFileName: unknown, zkeyFileName: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        contribute: (zkeyNameOld: unknown, zkeyNameNew: unknown, name: unknown, entropy: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        beacon: (zkeyNameOld: unknown, zkeyNameNew: unknown, name: unknown, beaconHashStr: unknown, numIterationsExp: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        exportJson: any;
        bellmanContribute: (curve: unknown, challengeFilename: unknown, responesFileName: unknown, entropy: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        exportVerificationKey: (zkeyName: unknown, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<unknown>;
        exportSolidityVerifier: (zKeyName: unknown, templates: {
            groth16: string;
            plonk: string;
        }, logger?: {
            [key: string]: import("debug").Debugger;
        }) => Promise<string>;
    };
};
export default wrappedSnark;
